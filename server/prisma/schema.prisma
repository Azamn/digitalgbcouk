generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  userName          String       @unique
  email             String       @unique
  password          String
  role              GlobalRole   @default(ADMIN)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  inviteStatus      InviteStatus @default(PENDING)
  isPasswordChanged Boolean      @default(false)

  client Client?
  member Member?

  notifications Notification[]
  comments      Comment[]
  session       Session?

  @@map("Users")
}

model Client {
  id                String          @id @default(cuid())
  password          String
  instagramId       String?
  instagramPassword String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members MemberOnClient[]
  post    Post[]

  @@map("Clients")
}

model Member {
  id        String            @id @default(cuid())
  password  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  clients MemberOnClient[]

  @@map("Members")
}

model MemberOnClient {
  id        String   @id @default(cuid())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String

  assignedAt DateTime @default(now())

  @@unique([clientId, memberId]) // prevent duplicate assignments
}


model Session {
  id         String   @id @default(cuid())
  sessionKey String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  message   String   @default("default message")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Notifications")
}

model Post {
  id          String    @id @unique @default(cuid())
  content     String    @db.VarChar(1000)
  mediaUrl    String    @db.VarChar(300)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scheduledAt DateTime?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  postStatus          PostStatus @default(WORKING)
  isConfirmedByClient Boolean    @default(false)
  Comment             Comment[]

  @@map("Posts")
}

model Comment {
  id          String      @id @default(cuid())
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  @@map("Comments")
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
}

enum MemberRole {
  MEMBER
}


enum PostStatus {
  PUBLISHED
  UNPUBLISHED
  SCHEDULED
  WORKING
  CONFIRMED
}
